OpenLayers.Format.GeoJSON=OpenLayers.Class(OpenLayers.Format.JSON,{ignoreExtraDims:false,read:function(j,g,a){g=(g)?g:"FeatureCollection";var d=null;var c=null;if(typeof j=="string"){c=OpenLayers.Format.JSON.prototype.read.apply(this,[j,a])}else{c=j}if(!c){OpenLayers.Console.error("Bad JSON: "+j)}else{if(typeof(c.type)!="string"){OpenLayers.Console.error("Bad GeoJSON - no type: "+j)}else{if(this.isValidType(c,g)){switch(g){case"Geometry":try{d=this.parseGeometry(c)}catch(b){OpenLayers.Console.error(b)}break;case"Feature":try{d=this.parseFeature(c);d.type="Feature"}catch(b){OpenLayers.Console.error(b)}break;case"FeatureCollection":d=[];switch(c.type){case"Feature":try{d.push(this.parseFeature(c))}catch(b){d=null;OpenLayers.Console.error(b)}break;case"FeatureCollection":for(var e=0,f=c.features.length;e<f;++e){try{d.push(this.parseFeature(c.features[e]))}catch(b){d=null;OpenLayers.Console.error(b)}}break;default:try{var h=this.parseGeometry(c);d.push(new OpenLayers.Feature.Vector(h))}catch(b){d=null;OpenLayers.Console.error(b)}}break}}}}return d},isValidType:function(c,a){var b=false;switch(a){case"Geometry":if(OpenLayers.Util.indexOf(["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","Box","GeometryCollection"],c.type)==-1){OpenLayers.Console.error("Unsupported geometry type: "+c.type)}else{b=true}break;case"FeatureCollection":b=true;break;default:if(c.type==a){b=true}else{OpenLayers.Console.error("Cannot convert types from "+c.type+" to "+a)}}return b},parseFeature:function(d){var b,f,a,e;a=(d.properties)?d.properties:{};e=(d.geometry&&d.geometry.bbox)||d.bbox;try{f=this.parseGeometry(d.geometry)}catch(c){throw c}b=new OpenLayers.Feature.Vector(f,a);if(e){b.bounds=OpenLayers.Bounds.fromArray(e)}if(d.id){b.fid=d.id}return b},parseGeometry:function(e){if(e==null){return null}var g,f=false;if(e.type=="GeometryCollection"){if(!(OpenLayers.Util.isArray(e.geometries))){throw"GeometryCollection must have geometries array: "+e}var b=e.geometries.length;var d=new Array(b);for(var a=0;a<b;++a){d[a]=this.parseGeometry.apply(this,[e.geometries[a]])}g=new OpenLayers.Geometry.Collection(d);f=true}else{if(!(OpenLayers.Util.isArray(e.coordinates))){throw"Geometry must have coordinates array: "+e}if(!this.parseCoords[e.type.toLowerCase()]){throw"Unsupported geometry type: "+e.type}try{g=this.parseCoords[e.type.toLowerCase()].apply(this,[e.coordinates])}catch(c){throw c}}if(this.internalProjection&&this.externalProjection&&!f){g.transform(this.externalProjection,this.internalProjection)}return g},parseCoords:{point:function(a){if(this.ignoreExtraDims==false&&a.length!=2){throw"Only 2D points are supported: "+a}return new OpenLayers.Geometry.Point(a[0],a[1])},multipoint:function(f){var c=[];var e=null;for(var b=0,a=f.length;b<a;++b){try{e=this.parseCoords.point.apply(this,[f[b]])}catch(d){throw d}c.push(e)}return new OpenLayers.Geometry.MultiPoint(c)},linestring:function(f){var c=[];var e=null;for(var b=0,a=f.length;b<a;++b){try{e=this.parseCoords.point.apply(this,[f[b]])}catch(d){throw d}c.push(e)}return new OpenLayers.Geometry.LineString(c)},multilinestring:function(f){var c=[];var b=null;for(var d=0,a=f.length;d<a;++d){try{b=this.parseCoords.linestring.apply(this,[f[d]])}catch(e){throw e}c.push(b)}return new OpenLayers.Geometry.MultiLineString(c)},polygon:function(g){var f=[];var e,b;for(var c=0,a=g.length;c<a;++c){try{b=this.parseCoords.linestring.apply(this,[g[c]])}catch(d){throw d}e=new OpenLayers.Geometry.LinearRing(b.components);f.push(e)}return new OpenLayers.Geometry.Polygon(f)},multipolygon:function(f){var b=[];var e=null;for(var c=0,a=f.length;c<a;++c){try{e=this.parseCoords.polygon.apply(this,[f[c]])}catch(d){throw d}b.push(e)}return new OpenLayers.Geometry.MultiPolygon(b)},box:function(a){if(a.length!=2){throw"GeoJSON box coordinates must have 2 elements"}return new OpenLayers.Geometry.Polygon([new OpenLayers.Geometry.LinearRing([new OpenLayers.Geometry.Point(a[0][0],a[0][1]),new OpenLayers.Geometry.Point(a[1][0],a[0][1]),new OpenLayers.Geometry.Point(a[1][0],a[1][1]),new OpenLayers.Geometry.Point(a[0][0],a[1][1]),new OpenLayers.Geometry.Point(a[0][0],a[0][1])])])}},write:function(e,d){var a={type:null};if(OpenLayers.Util.isArray(e)){a.type="FeatureCollection";var g=e.length;a.features=new Array(g);for(var c=0;c<g;++c){var b=e[c];if(!b instanceof OpenLayers.Feature.Vector){var f="FeatureCollection only supports collections of features: "+b;throw f}a.features[c]=this.extract.feature.apply(this,[b])}}else{if(e.CLASS_NAME.indexOf("OpenLayers.Geometry")==0){a=this.extract.geometry.apply(this,[e])}else{if(e instanceof OpenLayers.Feature.Vector){a=this.extract.feature.apply(this,[e]);if(e.layer&&e.layer.projection){a.crs=this.createCRSObject(e)}}}}return OpenLayers.Format.JSON.prototype.write.apply(this,[a,d])},createCRSObject:function(b){var c=b.layer.projection.toString();var a={};if(c.match(/epsg:/i)){var d=parseInt(c.substring(c.indexOf(":")+1));if(d==4326){a={type:"name",properties:{name:"urn:ogc:def:crs:OGC:1.3:CRS84"}}}else{a={type:"name",properties:{name:"EPSG:"+d}}}}return a},extract:{feature:function(c){var b=this.extract.geometry.apply(this,[c.geometry]);var a={type:"Feature",properties:c.attributes,geometry:b};if(c.fid!=null){a.id=c.fid}return a},geometry:function(d){if(d==null){return null}if(this.internalProjection&&this.externalProjection){d=d.clone();d.transform(this.internalProjection,this.externalProjection)}var a=d.CLASS_NAME.split(".")[2];var c=this.extract[a.toLowerCase()].apply(this,[d]);var b;if(a=="Collection"){b={type:"GeometryCollection",geometries:c}}else{b={type:a,coordinates:c}}return b},point:function(a){return[a.x,a.y]},multipoint:function(c){var d=[];for(var b=0,a=c.components.length;b<a;++b){d.push(this.extract.point.apply(this,[c.components[b]]))}return d},linestring:function(b){var d=[];for(var c=0,a=b.components.length;c<a;++c){d.push(this.extract.point.apply(this,[b.components[c]]))}return d},multilinestring:function(c){var d=[];for(var b=0,a=c.components.length;b<a;++b){d.push(this.extract.linestring.apply(this,[c.components[b]]))}return d},polygon:function(c){var d=[];for(var b=0,a=c.components.length;b<a;++b){d.push(this.extract.linestring.apply(this,[c.components[b]]))}return d},multipolygon:function(d){var c=[];for(var b=0,a=d.components.length;b<a;++b){c.push(this.extract.polygon.apply(this,[d.components[b]]))}return c},collection:function(c){var a=c.components.length;var d=new Array(a);for(var b=0;b<a;++b){d[b]=this.extract.geometry.apply(this,[c.components[b]])}return d}},CLASS_NAME:"OpenLayers.Format.GeoJSON"});